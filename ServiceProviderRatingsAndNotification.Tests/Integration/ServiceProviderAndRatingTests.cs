using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Dapper;
using DotNet.Testcontainers.Builders;
using DotNet.Testcontainers.Images;
using FluentAssertions;
using Moq;
using ServiceProviderRatingsAndNotification.Rating;
using ServiceProviderRatingsAndNotification.ServiceProvider;
using ServiceProviderRatingsAndNotification.ServiceProviderNotification;
using ServiceProviderRatingsAndNotification.Tests.Integration.Fixture;
using Testcontainers.MsSql;
using Testcontainers.RabbitMq;
using Xunit.Abstractions;

namespace ServiceProviderRatingsAndNotification.Tests.Integration;

/// <summary>
/// All these integration tests rely on data generated by the init-db.sql script.
/// Alterations to that script could make fail some of those tests.
/// </summary>
public class ServiceProviderAndRatingTests
{
    public class ServiceProvidersGetting : IClassFixture<RepositoriesFixture>
    {
        private readonly RepositoriesFixture _repositoriesFixture;

        public ServiceProvidersGetting(RepositoriesFixture repositoriesFixture)
        {
            _repositoriesFixture = repositoriesFixture;
        }

        [Fact]
        public async Task All_Service_Providers_Are_Retrieved_Correctly()
        {
            var serviceProviderService = new ServiceProviderService(_repositoriesFixture.ServiceProviderRepository);

            var serviceProviders = await serviceProviderService.GetAllAsync();

            var expectedServiceProviders = new[]
            {
                new ServiceProvider.ServiceProvider()
                {
                    Id = Guid.Parse("F4610D85-0EB2-464D-A8F9-04F1FCFBA694"),
                    Name = "Cool SP"
                },
                new ServiceProvider.ServiceProvider()
                {
                    Id = Guid.Parse("C9DA4F99-40E9-484C-BBD5-477C016F9726"),
                    Name = "Apulia Sp SRL"
                }
            };

            serviceProviders.Should().BeEquivalentTo(expectedServiceProviders);
        }
    }

    public class RatingSubmissionWithNotification : IClassFixture<RepositoriesFixture>, IClassFixture<NotifierFixture>
    {
        private readonly RepositoriesFixture _repositoriesFixture;
        private readonly NotifierFixture _notifierFixture;

        public RatingSubmissionWithNotification(RepositoriesFixture repositoriesFixture, NotifierFixture notifierFixture)
        {
            _repositoriesFixture = repositoriesFixture;
            _notifierFixture = notifierFixture;
        }

        [Fact]
        public async Task Rating_Submissions_Are_Sent_And_Notification_Are_Correctly_Retrieved()
        {
            var ratingService = new RatingService(_repositoriesFixture.ServiceProviderRepository, _notifierFixture.ServiceProviderNotifier);

            var serviceProviderId = Guid.Parse("F4610D85-0EB2-464D-A8F9-04F1FCFBA694");

            var serviceProvider = 
                await _repositoriesFixture
                    .ServiceProviderRepository
                    .GetAsync(serviceProviderId);

            // we submit some ratings, then we'll check if they're correctly returned by the service
            var ratingsToSubmit = new uint[] { 3, 4, 1, 2, 5, 1, 2, 2, 4, 3, 5 };

            foreach (var rating in ratingsToSubmit)
                await ratingService.SubmitRating(rating, serviceProvider.Id);

            var lastRatingSubmissions = ratingService.GetLastRatingSubmissions(100).ToList();

            // we revert the order to match the original sending order of submissions
            var expectedSubmissions = ratingsToSubmit.Select(u =>
                new RatingSubmission()
                {
                    ServiceProviderId = serviceProviderId,
                    Rating = u
                }).Reverse();

            lastRatingSubmissions
                .Should()
                .BeEquivalentTo(expectedSubmissions, options => options.WithStrictOrdering());
        }
    }

    public class RatingAverageForServiceProvider : IClassFixture<RepositoriesFixture>, IClassFixture<NotifierFixture>
    {
        private readonly RepositoriesFixture _repositoriesFixture;
        private readonly NotifierFixture _notifierFixture;

        public RatingAverageForServiceProvider(RepositoriesFixture repositoriesFixture, NotifierFixture notifierFixture)
        {
            _repositoriesFixture = repositoriesFixture;
            _notifierFixture = notifierFixture;
        }

        [Fact]
        public async Task Average_Rating_Is_Correct()
        {
            var ratingService = new RatingService(_repositoriesFixture.ServiceProviderRepository, _notifierFixture.ServiceProviderNotifier);

            var serviceProviderId = Guid.Parse("C9DA4F99-40E9-484C-BBD5-477C016F9726");

            var serviceProvider =
                await _repositoriesFixture
                    .ServiceProviderRepository
                    .GetAsync(serviceProviderId);

            var averageRatingForServiceProvider = await ratingService.GetAverageRatingForServiceProvider(serviceProvider.Id);

            averageRatingForServiceProvider.Should().Be(4.5);
        }

    }



}